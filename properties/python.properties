# Define SciTE settings for Python files.

file.patterns.py=*.py;*.pyw
file.patterns.scons=SConstruct;SConscript

shbang.python=py

filter.python=Python (py pyw)|$(file.patterns.py)|

lexer.$(file.patterns.py)=python
lexer.$(file.patterns.scons)=python

api.*.py=$(SciteDefaultHome)/api/Python-2.7.api
api.*.pyw=$(SciteDefaultHome)/api/Python-2.7.api

#autocomplete.choose.single=1
autocomplete.python.ignorecase=1
autocomplete.python.start.characters=.
autocomplete.python.fillups=(
autocompleteword.automatic=1 
calltip.python.ignorecase=1
calltip.python.word.characters=._$(chars.alpha)$(chars.numeric)



keywordclass.python2=as assert async await break class continue def del \
except exec finally global is lambda not \
or raise return try while yield open __init__ require

keywordclass.python3=False None True and as assert break class continue \
def del elif else except finally for from global if import in is lambda \
nonlocal not or pass raise return try while with yield

keywordclass.python=$(keywordclass.python2)

# Extra keywords for cython
keywordclass.cython=cdef cimport cpdef

keywords.$(file.patterns.py)=$(keywordclass.python) $(keywordclass.cython)
keywords.$(file.patterns.scons)=$(keywordclass.python)

# If you uncomment the 3 lines below,
# and put some words after "keywordclass2.python=",
# those words will be styled by style.python.14

keywordclass2.python=and elif else for from if import in pass print with
keywords2.$(file.patterns.py)=$(keywordclass2.python)
keywords2.$(file.patterns.scons)=$(keywordclass2.python)

#~ statement.indent.$(file.patterns.py)=10 :
statement.indent.$(file.patterns.py)=5 class def elif else except finally \
for if try while with

statement.lookback.$(file.patterns.py)=0
block.start.$(file.patterns.py)=
block.end.$(file.patterns.py)=

view.indentation.examine.*.py=2

tab.timmy.whinge.level=1

#fold.quotes.python=1

comment.block.python=#~

indent.python.colon=1

####################

#comment.box.start.python='''
#comment.box.middle.python=*
#comment.box.end.python='''

##=====================================
# Caret, Highlights, etc
#selection.fore=$(selection.fore)
#selection.back=#ffffff
#49483E



# Default (everything not below: spaces, untyped parameters)
#~ font.normal=font:Consolas,size:14
#DejaVu Sans Mono,size:12
#,DejaVu Sans Mono,

#style.python.0=$(font.normal),fore:#F8F8F2
#style.python.32=fore:#F8F8F2,back:#272822,$(font.normal)



# Python styles
# White space
style.python.0=fore:#808080
# Comment
style.python.1=fore:#75715E,italics
# Number
style.python.2=fore:#FFFFFF
# String
style.python.3=fore:#E6DB74
# Single quoted string
style.python.4=fore:#F92672
# Keyword
style.python.5=fore:#66D9EF
# Triple quotes
style.python.6=fore:#E6DB74
# Triple double quotes
style.python.7=fore:#E6DB74
# Class name definition
style.python.8=fore:#FFFFFF
# Function or method name definition
style.python.9=fore:#91E22E
# Operators
style.python.10=fore:#F92672
# Identifiers
style.python.11=fore:#FFFFFF
# Comment-blocks
style.python.12=fore:#CCDCDC
# End of line where string is not closed
style.python.13=fore:#FFFFFF,$(font.monospace),back:#4C0598,eolfilled
# Highlighted identifiers
style.python.14=fore:#F92672
# Decorators
#style.python.15=fore:#91E22E

# Matched Operators
#style.python.16=fore:#66D9EF,italics

# Keyword - special parameters ("Keywords")
#style.python.17=fore:#FF8000
#,italics

# Keyword - User defined
#style.python.18=fore:#F8F8F2

# Variable keyword (built-in) dereferencing %A_xxx%
#style.python.19=fore:#66D9EF,back:#122127
#,italics

# Error (unclosed string, unknown operator, invalid dereferencing, etc.)
#style.python.20=fore:#EF2929

#style.python.21=fore:#EF2929
#style.python.22=fore:#EF2929
#style.python.23=fore:#EF2929
#style.python.24=fore:#EF2929
#style.python.25=fore:#EF2929
#style.python.26=fore:#EF2929
#style.python.27=fore:#EF2929
#style.python.28=fore:#EF2929
#style.python.29=fore:#EF2929
#style.python.30=fore:#EF2929
#style.python.31=fore:#EF2929
#style.python.32=fore:#EF2929


#style.python.33=fore:#8F908A

# Matched Operators
style.python.34=fore:#0000FF,bold
style.python.35=fore:#FF0000,bold
#style.python.36=fore:#EF2929
# Indentation guides
style.python.33=fore:#8F908A,back:#272822
#style.python.37=fore:#34352D,back:#272822
#34352D
#,back:#000000
# Braces are only matched in operator style
braces.python.style=10
####################

code.page=936

if PLAT_WIN
	
    #command.go.*.py=c:\python\python36\pythonw  -u "$(FileNameExt)"
    #command.go.*.py=C:\python27\pythonw  -u "$(FileNameExt)"
    command.go.*.py=c:/python/python36/pythonw  -u "$(FileNameExt)"
	command.go.subsystem.*.py=1
	command.go.*.pyw=C:\Anaconda2\pythonw  -u "$(FileNameExt)"
	command.go.subsystem.*.pyw=1
    command.build.*.py=c:\python27\scripts\pylint.exe --py3k  "$(FileNameExt)"
	command.build.SConscript=scons.bat --up .
	command.build.SConstruct=scons.bat .

if PLAT_GTK
	command.go.*.py=python -u "$(FileNameExt)"
	command.build.SConscript=scons --up .
	command.build.SConstruct=scons .

if PLAT_MAC
	command.go.*.py=python -u "$(FileNameExt)"
	command.build.SConscript=scons --up .
	command.build.SConstruct=scons .

command.name.1.$(file.patterns.py)=Syntax Check
command.1.$(file.patterns.py)=python -c "import py_compile; py_compile.compile(r'$(FilePath)')"
